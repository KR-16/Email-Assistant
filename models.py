# Import required libraries
from sqlalchemy import create_engine, Column, Integer, String, DateTime, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from datetime import datetime
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Create base class for declarative models
Base = declarative_base()

class Candidate(Base):
    """
    Represents a candidate in the system.
    Stores basic information about candidates fetched from Salesforce.
    """
    __tablename__ = 'candidates'
    
    # Primary key for the candidate
    id = Column(Integer, primary_key=True)
    # Salesforce ID to maintain reference to Salesforce records
    salesforce_id = Column(String(50), unique=True)
    # Candidate's email address
    email = Column(String(255), unique=True)
    # Candidate's full name
    name = Column(String(255))
    # Timestamp when the candidate was added to the system
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships with other tables
    email_stats = relationship("EmailStats", back_populates="candidate")
    email_responses = relationship("EmailResponse", back_populates="candidate")

class EmailStats(Base):
    """
    Stores daily email statistics for each candidate.
    Tracks the number of emails in each category.
    """
    __tablename__ = 'email_stats'
    
    # Primary key for the stats record
    id = Column(Integer, primary_key=True)
    # Foreign key to link with Candidate table
    candidate_id = Column(Integer, ForeignKey('candidates.id'))
    # Date for which stats are recorded
    date = Column(DateTime, default=datetime.utcnow)
    # Count of application-related emails
    application_count = Column(Integer, default=0)
    # Count of interview-related emails
    interview_count = Column(Integer, default=0)
    # Count of offer-related emails
    offer_count = Column(Integer, default=0)
    # Count of rejection-related emails
    rejection_count = Column(Integer, default=0)
    # Count of other category emails
    other_count = Column(Integer, default=0)
    
    # Relationship with Candidate table
    candidate = relationship("Candidate", back_populates="email_stats")

class EmailResponse(Base):
    """
    Stores generated email responses for each processed email.
    Maintains history of all automated responses.
    """
    __tablename__ = 'email_responses'
    
    # Primary key for the response record
    id = Column(Integer, primary_key=True)
    # Foreign key to link with Candidate table
    candidate_id = Column(Integer, ForeignKey('candidates.id'))
    # Gmail message ID for reference
    email_id = Column(String(255))
    # Category of the email (Application, Interview, Offer, Rejection, Other)
    category = Column(String(50))
    # Draft response generated by ChatGPT
    response_draft = Column(String)
    # Timestamp when the response was generated
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationship with Candidate table
    candidate = relationship("Candidate", back_populates="email_responses")

def init_db():
    """
    Initialize the database connection and create all tables.
    Returns the SQLAlchemy engine instance.
    """
    # Construct database URL from environment variables
    db_url = f"postgresql://{os.getenv('DB_USER')}:{os.getenv('DB_PASSWORD')}@{os.getenv('DB_HOST')}:{os.getenv('DB_PORT')}/{os.getenv('DB_NAME')}"
    # Create database engine
    engine = create_engine(db_url)
    # Create all tables defined in Base
    Base.metadata.create_all(engine)
    return engine 